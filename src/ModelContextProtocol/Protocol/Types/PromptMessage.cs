namespace ModelContextProtocol.Protocol.Types;

/// <summary>
/// Represents a message within the Model Context Protocol (MCP) system, used for communication between clients and AI models.
/// </summary>
/// <remarks>
/// <para>
/// A <see cref="PromptMessage"/> encapsulates content sent to or received from AI models in the Model Context Protocol.
/// Each message has a specific role (user or assistant) and contains content which can be text, images, or embedded resources.
/// </para>
/// 
/// <para>
/// This class is similar to <c>SamplingMessage</c>, but with enhanced support for embedding resources from the MCP server.
/// It serves as a core data structure in the MCP message exchange flow, particularly in prompt formation and model responses.
/// </para>
/// 
/// <para>
/// <see cref="PromptMessage"/> objects are typically used in collections within <see cref="GetPromptResult"/> 
/// to represent complete conversations or prompt sequences. They can be converted to and from <see cref="Microsoft.Extensions.AI.ChatMessage"/>
/// objects using the extension methods <see cref="AIContentExtensions.ToChatMessage(PromptMessage)"/> and
/// <see cref="AIContentExtensions.ToPromptMessages(Microsoft.Extensions.AI.ChatMessage)"/>.
/// </para>
/// 
/// <para>
/// For more details on the schema and protocol specifications, see:
/// <see href="https://github.com/modelcontextprotocol/specification/blob/main/schema/">Model Context Protocol Schema</see>
/// </para>
/// </remarks>
/// <example>
/// <code>
/// // Create a user message
/// var userMessage = new PromptMessage
/// {
///     Role = Role.User,
///     Content = new Content { Text = "How can I learn about quantum computing?", Type = "text" }
/// };
/// 
/// // Create an assistant message with embedded content
/// var assistantMessage = new PromptMessage
/// {
///     Role = Role.Assistant,
///     Content = new Content { Text = "Quantum computing is a fascinating field...", Type = "text" }
/// };
/// 
/// // Use in a GetPromptResult
/// var promptResult = new GetPromptResult
/// {
///     Messages = [userMessage, assistantMessage]
/// };
/// </code>
/// </example>
public class PromptMessage
{
    /// <summary>
    /// Gets or sets the content of the message, which can be text, image, audio, or an embedded resource.
    /// </summary>
    /// <remarks>
    /// The <see cref="Content"/> object contains all the message payload, whether it's simple text,
    /// base64-encoded binary data (for images/audio), or a reference to an embedded resource.
    /// The <see cref="Content.Type"/> property indicates the specific content type.
    /// </remarks>
    [System.Text.Json.Serialization.JsonPropertyName("content")]
    public Content Content { get; set; } = new();

    /// <summary>
    /// Gets or sets the role of the message sender, specifying whether it's from a "user" or an "assistant".
    /// </summary>
    /// <remarks>
    /// In the Model Context Protocol, each message must have a clear role assignment to maintain
    /// the conversation flow. User messages represent queries or inputs from users, while assistant
    /// messages represent responses generated by AI models.
    /// </remarks>
    [System.Text.Json.Serialization.JsonPropertyName("role")]
    public Role Role { get; set; } = new();
}
